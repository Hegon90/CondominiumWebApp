// <auto-generated />
using System;
using CondominiumWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CondominiumWebApp.Migrations
{
    [DbContext(typeof(CondominiumContext))]
    [Migration("20230723032229_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("CondominiumWebApp.Models.Block", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("block_name");

                    b.HasKey("BlockId")
                        .HasName("PRIMARY");

                    b.ToTable("blocks", (string)null);
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingDay")
                        .HasColumnType("longtext");

                    b.Property<string>("BookingName")
                        .HasColumnType("longtext");

                    b.Property<string>("BookingPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("BookingTime")
                        .HasColumnType("longtext");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("owner_name");

                    b.Property<string>("OwnerSurname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("owner_surname");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("phone_number");

                    b.HasKey("OwnerId")
                        .HasName("PRIMARY");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<int?>("BlockId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<int?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("PropertyDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("property_date");

                    b.Property<int?>("PropertyNumber")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("property_number");

                    b.Property<string>("PropertyPasscode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("property_passcode");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("property_type");

                    b.Property<int?>("StreetId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    b.HasKey("PropertyId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BlockId" }, "fk_properties_block_id_idx");

                    b.HasIndex(new[] { "OwnerId" }, "fk_properties_owner_id_idx");

                    b.HasIndex(new[] { "StreetId" }, "fk_properties_street_id_idx");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int")
                        .HasColumnName("street_number");

                    b.HasKey("StreetId")
                        .HasName("PRIMARY");

                    b.ToTable("streets", (string)null);
                });

            modelBuilder.Entity("CondominiumWebApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserNickname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_nickname");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_password");

                    b.Property<string>("UserSurname")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_surname");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Property", b =>
                {
                    b.HasOne("CondominiumWebApp.Models.Block", "Block")
                        .WithMany("Properties")
                        .HasForeignKey("BlockId")
                        .IsRequired()
                        .HasConstraintName("fk_properties_block_id");

                    b.HasOne("CondominiumWebApp.Models.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_owner_id");

                    b.HasOne("CondominiumWebApp.Models.Street", "Street")
                        .WithMany("Properties")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("fk_properties_street_id");

                    b.Navigation("Block");

                    b.Navigation("Owner");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Block", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CondominiumWebApp.Models.Street", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
